if(new<=0){
print("kindly enter the positive number:")
}else{
if(new==1){
print(paste("the fabonacci series: ",a))
}
else if(new==2){
print(paste("the fabpnacii series:",a ",",b))
a<-0
b<-1
count=2
if(new<=0){
print("kindly enter the positive number:")
}else{
if(new==1){
print(paste("the fabonacci series: ",a))
}
else if(new==2){
print(paste("the fabpnacii series:",a, ",",b))
}
else{
while(count<new){
nth=a+b
print(nth)
a=b
b=nth
count=count+1
}
}
}
)
new<- as.integer(readline(prompt ="enter the number of terms:"))
a<-0
b<-1
count=2
if(new<=0){
print("kindly enter the positive number:")
}else{
if(new==1){
print(paste("the fabonacci series: ",a))
}
else if(new==2){
print(paste("the fabpnacii series:",a, ",",b))
}
else{
while(count<new){
nth=a+b
print(nth)
a=b
b=nth
count=count+1
}
}
}
new<- as.integer(readline(prompt ="enter the number of terms:"))
a<-0
b<-1
count=2
if(new<=0){
print("kindly enter the positive number:")
}else{
if(new==1){
print(paste("the fabonacci series: ",a))
}
else if(new==2){
print(paste("the fabpnacii series:",a, ",",b))
}
else{
print(a)
print(b)
while(count<new){
nth=a+b
print(nth)
a=b
b=nth
count=count+1
}
}
}
new<- as.integer(readline(prompt ="enter the number of terms:"))
a<-0
b<-1
count=2
if(new<=0){
print("kindly enter the positive number:")
}else{
if(new==1){
print(paste("the fabonacci series: ",a))
}
else if(new==2){
print(paste("the fabpnacii series:",a, ",",b))
}
else{
print(a)
print(b)
while(count<new){
nth=a+b
print(nth)
a=b
b=nth
count=count+1
}
}
}
add <-function(x,y){
return(x+y)
}
subtract <- function(x,y){
return(x-y)
}
multiply <-function(x,y){
return(x*y)
}
divide <- function(x,y){
if(y!=0){
return(x/y)
}else {
return("this is not defined")
}
}
print("select operator: 1.add
2.subtract
3.multiply
4.divide")
choice= as.integer(readline(prompt = "enter the choices [1/2/3/4]"))
num2=  as.integer(readline(prompt = "enter the second number:"))
result <- switch(choice, add(num1,num2),subtract(num1,num2),multiply(num1,num2),divide(num1,num2))
print(paste(num1,operator,num2,"=",result))
add <-function(x,y){
return(x+y)
}
subtract <- function(x,y){
return(x-y)
}
multiply <-function(x,y){
return(x*y)
}
divide <- function(x,y){
if(y!=0){
return(x/y)
}else {
return("this is not defined")
}
}
print("select operator: 1.add
2.subtract
3.multiply
4.divide")
choice= as.integer(readline(prompt = "enter the choices [1/2/3/4]"))
num1 = as.integer(readline(prompt = "enter the first number:"))
num2=  as.integer(readline(prompt = "enter the second number:"))
operator<- switch (choice,"+","-","*","/")
result <- switch(choice, add(num1,num2),subtract(num1,num2),multiply(num1,num2),divide(num1,num2))
print(paste(num1,operator,num2,"=",result))
add <-function(x,y){
return(x+y)
}
subtract <- function(x,y){
return(x-y)
}
multiply <-function(x,y){
return(x*y)
}
divide <- function(x,y){
if(y!=0){
return(x/y)
}else {
return("this is not defined")
}
}
print("select operator: 1.add
2.subtract
3.multiply
4.divide")
choice= as.integer(readline(prompt = "enter the choices [1/2/3/4]"))
num1 = as.integer(readline(prompt = "enter the first number:"))
num2=  as.integer(readline(prompt = "enter the second number:"))
operator<- switch (choice,"+","-","*","/")
result <- switch(choice, add(num1,num2),subtract(num1,num2),multiply(num1,num2),divide(num1,num2))
print(paste(num1,operator,num2,"=",result))
plot(1:10,color="red")
plot(1:10,color="red"):
plot(1:10,color="red"):
plot(1:10,color="red"):
plot(1:10,col="red"):
plot(1,3)
plot(1:10,col="red"):
plot(1,3):
plot(1:10,col="red"):
plot(1,3):
plot(1:10,col="red"):
plot(1,3):
plot(1:10, type="o", col="red", xlab="Index", ylab="Value", main="Simple Plot")
plot(1:10, type="o", col="red", xlab="Index", ylab="Value", main="Simple Plot")
par(mar=c(5, 4, 4, 2) + 0.1)  # Default margins; adjust as needed
plot(1:10, type="o", col="red", xlab="Index", ylab="Value", main="Simple Plot")
chest <- c(rep("gold",20),rep("silver",30),rep("bronze",50))
sample(x=chest,size=10)
vector <- c("succ","fail")
probab <-c(0.9,0.1)
res <- sample( veactor,size=10,prob = probab,replace = TRUE)
vector <- c("succ","fail")
probab <-c(0.9,0.1)
res <- sample( vector,size=10,prob = probab,replace = TRUE)
res
vector <- c("succ","fail")
probab <-c(0.9,0.1)
res <- sample( x=vector,size=10,prob = probab,replace = TRUE)
res
m <- 20
notshared <- prod (365 - (0:(M-1))/365)
m <- 20
notshared <- prod (365 - (0:(m-1))/365)
shared <- 1-prod
m <- 20
notshared <- prod (365 - (0:(m-1))/365)
shared <- 1- notshared
print(paste("the prob is ",shared))
print(paste("the prob is ",shared))
n <-5000
count<-0
for(i in 1:n){
yesno <- any(duplicate(sample(365,m,replace=TRUE)))
count<- count + as.integer(yesno)
}
n <-5000
count<-0
for(i in 1:n){
yesno <- any(duplicated(sample(365,m,replace=TRUE)))
count<- count + as.integer(yesno)
}
probability <- count/n
probability
m <- 20
notshared <- prod (365 - (0:(m-1))/365)
shared <- 1- notshared
print(paste("the prob is ",shared))
n <-5000
count<-0
for(i in 1:n){
yesno <- any(duplicated(sample(365,m,replace=TRUE)))
count<- count + as.integer(yesno)
}
probability <- count/n
probability
m <- 20
notshared <- prod (365 - (0:(m-1))/365)
shared <- 1- notshared
print(paste("the prob is ",shared))
n <-5000
count<-0
for(i in 1:n){
yesno <- any(duplicated(sample(365,m,replace=TRUE)))
count<- count + as.integer(yesno)
}
probability <- count/n
probability
m <- 20
notshared <- prod (365 - (0:(m-1))/365)
shared <- 1- notshared
print(paste("the prob is ",shared))
n <-5000
count<-0
for(i in 1:n){
yesno <- any(duplicated(sample(365,m,replace=TRUE)))
count<- count + as.integer(yesno)
}
probability <- count/n
probability
m <- 20
notshared <- prod (365 - (0:(m-1))/365)
shared <- 1- notshared
print(paste("the prob is ",shared))
n <-5000
count<-0
for(i in 1:n){
yesno <- any(duplicated(sample(365,m,replace=TRUE)))
count<- count + as.integer(yesno)
}
probability <- count/n
probability
plot(1,3,)
plot(1,3,)
plot(1,3)
plot(1,3,main="single cordinate plot")
plot(1,3,main="single cordinate plot")
bayes <-function(pa,pb,pba){
pab <- pa*pba/pb
return(pab)
}
pc=0.4
pr=0.2
pcr=.85
prc= bayes(pr,pc,pcr)
prc
data("iris")
data(iris)
data <- iris
head(data)
str(data)
rng <- range(data$Sepal.Length)
rng
rng <- range(data$Sepal.Length,0.25)
rng
meaan <- mean(data$Sepal.Length)
meaan
median(data$Sepal.Length)
quantile(data$Sepal.Length,0.25)
quantile(data$Sepal.Length,0.75)
IQR(data$Sepal.Length)
var(data$Sepal.Length)
std(data$Sepal.Length)
sd(data$Sepal.Length)
v <- c(2,1,2,3,2,4,1,2,3,1,4,2,3,1,2,1,2,3,2,3,2,2,2)
mode(v)
mode1 <- function(v){
uniq <-unique(v)
uniq[which.max(tabulate(match(v,uniq)))]
}
v <- c(2,1,2,3,2,4,1,2,3,1,4,2,3,1,2,1,2,3,2,3,2,2,2)
mode1(v)
n<-12
p<- 1/6
p1 <- pbinom(9,size=n,prob=p)
p2 <- pbinom(6,size=n,prob=p)
p3 <- p1-p2
p3
mean<-12
sd<-15.2
more_84 <- (1-pnorm(84,mean=mean, sd=sd))*100
more_84
mean1<-12
sd1<-15.2
more_84 <- (1-pnorm(84,mean=mean1, sd=sd1))*100
more_84
mean1<-12
sd1<-15.2
more_84 <- (1-pnorm(84,mean=mean1, sd=sd1))*100
more_84_percent
mean1<-12
sd1<-15.2
less_84 <- pnorm(84,mean=mean1, sd=sd1)
less_84
mean1<-72
sd1<-15.2
less_84 <- pnorm(84,mean=mean1, sd=sd1)
less_84
more <- (1-less_84)*100
more
no_of_car < dpois(0,lambda = 5)
no_of_car < dpois(0,lambda = 5)
no_of_car <- dpois(0,lambda = 5)
no_of_car
nocar <- ppois(50,lambda = 50)- ppois(47, lambda = 50)
nocar
res <- dhyper(3,pet,def,c)
def<- 17
pet <- 250-17
c <-5
res <- dhyper(3,pet,def,c)
res
def<- 17
pet <- 250-17
c <-5
res <- dhyper(3,def,pet,c)
res
si <-31
per <-0.447
x_values <- 0:si
pmf_values <- dbinom(x_values,si,per)
pmf_values
si <-31
per <-0.447
x_values <- 0:si
pmf_values <- dbinom(x_values,si,per)
pmf_values
plot(x_values, pmf_values, type = "h", lwd = 2, col = "blue",
xlab = "Number of Students", ylab = "Probability",
main = "Probability Mass Function (PMF)")
x <- c(0 1 2 3 4)
x <- c(0,1,2,3,4)
px <- c(0.41,0.37,0.16,0.05,0.01)
sum(x*px)
weighted.mean(x,px)
c(x%*%px)
ft <- function(t){
0.1*exp(-0.1*t)
}
exp_val <-  integrate(function(t) t*ft(t),0,Inf)$value
exp_val
y<- c(0,1,2,3)
p_x <- c(0.1,0.2,0.2,0.5)
x<- c(0,1,2,3)
y <- 2*x -12
y <- 10*x -12
value <- sum(p_x*x)
value
value <- sum(x*p_x)
value <- sum(x*p_x)
value
proby<- sapply(x,y)
x<- c(0,1,2,3)
p_x <- c(0.1,0.2,0.2,0.5)
y <- 10*x -12
proby<- sapply(x,y)
x<- c(0,1,2,3)
p_x <- c(0.1,0.2,0.2,0.5)
y <- 10*x -12
proby<- sapply(x,y)
x<- c(0,1,2,3)
p_x <- c(0.1,0.2,0.2,0.5)
y <- function(x){ 10*x -12
}
proby<- sapply(x,y)
value <- sum(p_x*proby)
value
func<- function(x){
0.5* exp(-x)
}
first <- integrate (function(x) x*func(x),1,10)$value
first
second<- integrate(function(x) x^2*func(x),1,10)$value
second
varience<- second - first^2
varience
mode1 <- function(v){
uniq <-unique(v)
uniq[which.max(tabulate(match(v,uniq)))]
}
v <- c(2,1,2,3,2,4,1,2,3,1,4,2,3,1,2,1,2,3,2,3,2,2,2)
mode1(v)
functx <- function(x){
(3/4)*((1/4)^(x-1))
}
proby <- function(y){
x<-sqrt(y)
if(x!=floor(x)|| x<1){
return(0)
}
return(functx(X))
}
xvalue<- 3
yvalue<- xvalue^2
prob_y<-proby(yvalue)
functx <- function(x){
(3/4)*((1/4)^(x-1))
}
proby <- function(y){
x<-sqrt(y)
if(x!=floor(x)|| x<1){
return(0)
}
return(functx(x))
}
xvalue<- 3
yvalue<- xvalue^2
prob_y<-proby(yvalue)
xvalues <-1:5
yvalues <- x_values^2
prob_y_all <- sapply(yvalues, proby)
expected<-- sum(prob_y_all*yvalues)
varience<- sum((yvalues-expected)^2 * prob_y_all)
varience
library dplyr
library (dplyr)
install.packages(dplyr)
install.packages(dplyr)
x<-read.csv(url("https://raw.githubusercontent.com/dexter4657/daily_show_guests.csv/refs/heads/main/daily_show_guests.csv.xls"))
x
head(x)
x %>%
select(x,y) %>%
head(.,10)
x %>%
head(.,10)
x >
head(.,10)
x %>%
select(YEAR,GoogleKnowlege_Occupation,Show,Group,Raw_Guest_List) %>%
head(.,10)
library(dplyr)
x %>%
select(YEAR,GoogleKnowlege_Occupation,Show,Group,Raw_Guest_List) %>%
head(.,10)
x %>% x %>% rename(YEAR=year,GoogleKnowlege_Occupation=job,Show=date,Group=category,Raw_Guest_List=guest_name)
x %>% x %>% rename(YEAR=year,GoogleKnowlege_Occupation=job,Show=date,Group=category,Raw_Guest_List=guest_name)
x<- x %>% rename(YEAR=year,GoogleKnowlege_Occupation=job,Show=date,Group=category,Raw_Guest_List=guest_name)
x<- x %>% rename(year= YEAR; job=GoogleKnowlege_Occupation; date= Show; category= Group; guest_name= Raw_Guest_List)
x<- x %>% rename(year= YEAR, job=GoogleKnowlege_Occupation, date= Show, category= Group, guest_name= Raw_Guest_List)
x %>% select(year,date,guest_name)
df %>% select(year,date,guest_name)
x %>% select(year,date,guest_name)
x %>% group_by(across(c(-year)))
x %>% select(-year)
x %>% filter(job="actor",guest_name="ABC")
x %>% filter(job=="actor",guest_name=="ABC")
x %>% mutate(date=as.date(date,"%d-%m-%y"))%>% arrange(date)
x %>% mutate(date=as.Date(date,"%d-%m-%y"))%>% arrange(date)
x %>% arrange(date)
x %>% mutate(experience)
x %>% mutate(experience=NA)
# Install and load the jpeg package
install.packages("jpeg")  # Install jpeg package if needed
library(jpeg)
library(jpeg)
# Read the image from the URL
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
img <- readJPEG(url, native = TRUE)
# Flatten the image into a vector
img_vector <- as.vector(img)
img <- readJPEG(url, native = TRUE)
